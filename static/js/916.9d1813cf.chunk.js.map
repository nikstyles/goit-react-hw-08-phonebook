{"version":3,"file":"static/js/916.9d1813cf.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/components/TextField/text-field.module.css?a0d7","components/TextField/TextField.jsx","hooks/useForm.js","components/RegisterForm/fields.js","webpack://goit-react-hw-08-phonebook/./src/components/RegisterForm/RegisterForm.module.css?a5d4","components/RegisterForm/RegisterForm.jsx","webpack://goit-react-hw-08-phonebook/./src/pages/RegisterPage/RegisterPage.module.css?fdcb","pages/RegisterPage/RegisterPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"formGroup\":\"text-field_formGroup__sWZNK\",\"field\":\"text-field_field__4qqhi\",\"input\":\"text-field_input__9Gcuq\",\"label\":\"text-field_label__aA6hD\"};","import PropTypes from 'prop-types';\n\nimport styles from './text-field.module.css';\n\nconst TextField = ({\n  id,\n  label,\n  value,\n  name,\n  handleChange,\n  type,\n  checked,\n  // className,\n  placeholder,\n  required,\n  pattern,\n}) => {\n  // const fullClassName = className\n  //   ? `${styles.field} ${className}`\n  //   : styles.field;\n\n  return (\n    <div className={styles.formGroup}>\n      {label && (\n        <label className={styles.label} htmlFor={id}>\n          {label}\n        </label>\n      )}\n      <input\n        className={styles.input}\n        id={id}\n        value={value}\n        checked={checked}\n        name={name}\n        onChange={handleChange}\n        type={type}\n        placeholder={placeholder}\n        required={required}\n        pattern={pattern}\n      />\n    </div>\n  );\n};\n\nexport default TextField;\n\nTextField.defaultProps = {\n  type: 'text',\n  required: false,\n};\n\nTextField.propTypes = {\n  id: PropTypes.string,\n  label: PropTypes.string,\n  value: PropTypes.string,\n  name: PropTypes.string.isRequired,\n  handleChange: PropTypes.func.isRequired,\n  type: PropTypes.string,\n  className: PropTypes.string,\n  placeholder: PropTypes.string,\n  required: PropTypes.bool,\n  pattern: PropTypes.string,\n};\n","import { useState } from 'react';\n\nconst useForm = ({ initialState, onSubmit }) => {\n  const [state, setState] = useState({ ...initialState });\n\n  const handleChange = ({ target }) => {\n    const { value, name } = target;\n    // const { value, name, type, checked } = target;\n\n    // const newValue = type === 'checkbox' ? checked : value;\n    setState(prevState => ({\n      ...prevState,\n      [name]: value,\n    }));\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit({ ...state });\n    setState({ ...initialState });\n  };\n\n  return { state, setState, handleChange, handleSubmit };\n};\n\nexport default useForm;\n","const fields = {\n  name: {\n    label: 'User name',\n    name: 'name',\n    type: 'text',\n    placeholder: 'Enter user name',\n    required: true,\n  },\n  email: {\n    label: 'User email',\n    name: 'email',\n    type: 'email',\n    placeholder: 'Enter user email',\n    required: true,\n  },\n  password: {\n    label: 'User password',\n    name: 'password',\n    type: 'password',\n    placeholder: 'Enter user password (min 6 symbols)',\n    required: true,\n  },\n};\n\nexport default fields;\n","// extracted by mini-css-extract-plugin\nexport default {\"register_form\":\"RegisterForm_register_form__WJBYe\",\"input_list\":\"RegisterForm_input_list__Dmml+\",\"register_btn\":\"RegisterForm_register_btn__1pW5X\"};","import { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { nanoid } from 'nanoid';\n\nimport useForm from '../../hooks/useForm';\n\nimport TextField from '../../components/TextField/TextField';\nimport fields from './fields';\nimport s from './RegisterForm.module.css';\n\nconst RegisterForm = ({ onSubmit }) => {\n  const initialState = {\n    name: '',\n    email: '',\n    password: '',\n  };\n\n  const { state, handleChange, handleSubmit } = useForm({\n    initialState,\n    onSubmit,\n  });\n\n  const nameId = useMemo(() => nanoid(), []);\n  const emailId = useMemo(() => nanoid(), []);\n  const passwordId = useMemo(() => nanoid(), []);\n\n  const { name, email, password } = state;\n\n  return (\n    <div className={s.register_form}>\n      <form onSubmit={handleSubmit} autoComplete=\"on\">\n        <div className={s.input_list}>\n          <TextField\n            id={nameId}\n            value={name}\n            handleChange={handleChange}\n            {...fields.name}\n          />\n          <TextField\n            id={emailId}\n            value={email}\n            handleChange={handleChange}\n            {...fields.email}\n          />\n          <TextField\n            id={passwordId}\n            value={password}\n            handleChange={handleChange}\n            {...fields.password}\n          />\n        </div>\n        <button className={s.register_btn}>Register</button>\n      </form>\n    </div>\n  );\n};\n\nexport default RegisterForm;\n\nRegisterForm.defaultProps = {\n  onSubmit: () => {},\n};\n\nRegisterForm.propTypes = {\n  onSubmit: PropTypes.func,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"register_form\":\"RegisterPage_register_form__xpjye\"};","// redux\nimport { useDispatch } from 'react-redux';\nimport { signup } from '../../redux/auth/auth-operations';\n// components\nimport RegisterForm from '../../components/RegisterForm/RegisterForm';\nimport s from './RegisterPage.module.css';\n\nexport default function RegisterPage() {\n  const dispatch = useDispatch();\n\n  const onRegister = data => {\n    dispatch(signup(data));\n  };\n\n  return (\n    <div className={s.register_form}>\n      <RegisterForm onSubmit={onRegister} />\n    </div>\n  );\n}\n"],"names":["TextField","id","label","value","name","handleChange","type","checked","placeholder","required","pattern","className","styles","htmlFor","onChange","defaultProps","initialState","onSubmit","useState","state","setState","target","prevState","handleSubmit","e","preventDefault","email","password","RegisterForm","useForm","nameId","useMemo","nanoid","emailId","passwordId","s","autoComplete","fields","RegisterPage","dispatch","useDispatch","data","signup"],"sourceRoot":""}